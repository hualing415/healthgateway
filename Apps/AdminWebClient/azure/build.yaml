name: 1.0.0$(Rev:.r) #Build number

#Build variables
variables:
    App.Home: $(Build.SourcesDirectory)/Apps/AdminWebClient
    App.Name: adminwebclient
    App.FunctionalTests: $(App.Home)/test/functional

pr: none

trigger:
    batch: "true"
    branches:
        include:
            - dev
    paths:
        include:
            - Apps/AdminWebClient
            - Apps/Common
            - Apps/Database

pool:
    name: "HealthGateway"

steps:
    - task: Npm@1
      displayName: Install NPM Packages
      inputs:
          command: "install"
          workingDir: "$(App.Home)/src/ClientApp"

    - task: DotNetCoreCLI@2
      displayName: Run dotnet Tests
      inputs:
          command: "test"
          projects: "$(App.Home)/test/unit/AdminWebClientTests.csproj"
          arguments: "/p:CollectCoverage=true /p:CoverletOutputFormat=cobertura"
          testRunTitle: "AdminWebClient"

    - script: |
          set -e
          reportgenerator -reports:$(App.Home)/test/**/coverage.cobertura.xml -targetdir:$(App.Home)/CodeCoverage -reporttypes:"HtmlInline_AzurePipelines;Cobertura"
      displayName: Create Code Coverage Report

    - task: PublishCodeCoverageResults@1
      displayName: "Publish Code Coverage"
      inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: "$(App.Home)/CodeCoverage/Cobertura.xml"
          pathToSources: "$(App.Home)/src"
          reportDirectory: "$(App.Home)/CodeCoverage"

    - task: DotNetCoreCLI@2
      displayName: Publish Admin WebClient
      inputs:
          modifyOutputPath: false
          command: "publish"
          publishWebProjects: false
          projects: "$(App.Home)/src"
          arguments: "-o $(Build.BinariesDirectory)"
          zipAfterPublish: false

    - script: |
          set -e
          cp $(App.Home)/Dockerfile $(Build.BinariesDirectory)
          oc process -f $(Build.SourcesDirectory)/Tools/BaseBuild/build.yaml -p NAME=$(App.Name) | oc apply -f -
          oc start-build $(App.Name) --wait --follow --from-dir $(Build.BinariesDirectory) 
          oc tag $(App.Name):latest $(App.Name):$(Build.BuildNumber)
      displayName: "Build OpenShift Image and push to Image Stream"

    # - task: CopyFiles@2
    #   displayName: Copy Functional Tests to Staging
    #   inputs:
    #     SourceFolder: '$(App.FunctionalTests)'
    #     Contents: '**'
    #     TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: PublishPipelineArtifact@0
      displayName: "Publish Pipeline Artifacts"
      inputs:
          targetPath: "$(Build.ArtifactStagingDirectory)"
